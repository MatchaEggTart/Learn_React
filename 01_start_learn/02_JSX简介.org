* JSX


** JSX 简介

*** WHAT

JSX 是 JavaScript 的语法扩展

它既不是字符串也不是HTML

就像下面的例子

#+begin_src js
  const element = <h1>Hello, world!</h1>;
#+end_src

它即像模板语言（标签），也拥有 Javascript 的全部功能，JSX 可以生成 属于 React的“元素”

*** WHY

React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合

比如，在 UI 中需要绑定处理事件、在某些时刻状态发生变化时需要通知到 UI，以及需要在 UI 中展示准备好的数据

React 并没有采用将标记与逻辑进行分离到不同文件这种人为地分离方式，而是通过将二者共同存放在称之为“组件”的松散耦合单元之中，来实现关注点分离

React 不强制要求使用 JSX，但是大多数人发现，在 JavaScript 代码中将 JSX 和 UI 放在一起时，会在视觉上有辅助作用

它还可以使 React 显示更多有用的错误和警告消息


** 在 JSX 中嵌入表达式

*** WHAT

在 JSX 语法中，你可以在大括号 { } 内放置任何有效的 JavaScript 表达式

例如，2 + 2，json (ex: user.firstName) 或 function (ex:formatName(user)) 都是有效的 JavaScript 表达式

*** HOW

在 src/ 创建 FormatName.js

#+begin_src js
  const user = {
    firstName: 'Harper',
    lastName: 'Perez'
  }

  function formatName(user) {
    return user.firstName + ' ' + user.lastName;
  }

  /*
  const element = (
    <div>
      <h1>
        {formatName(user)}
      </h1>
      <h2>
        1 + 2 = {1 + 2}
      </h2>
    </div>
  )
  ,*/

  function element() {
    return (
      <div>
        <h1>
          {formatName(user)}
        </h1>
        <h2>
          1 + 2 = {1 + 2}
        </h2>
      </div>    
    )
  }

  function FormatName() {
    // return element;
    return element();
  }

  export default FormatName;
#+end_src

*** ATTENTION

如果想返回多个标签，需要使用一个大标签包裹多个标签


** JSX 也是一个表达式

*** WHAT

在编译之后，JSX 表达式会被转为普通 JavaScript 函数调用，并且对其取值后得到 JavaScript 对象

你可以在 if 语句和 for 循环的代码块中使用 JSX，将 JSX 赋值给变量，把 JSX 当作参数传入，以及从函数中返回 JSX

*** HOW

在 src/ 创建 GetGreeting.js

#+begin_src js
  const user = {
    firstName: 'Harper',
    lastName: 'Perez'
  }

  function formatName(user) {
    return user.firstName + " " + user.lastName;
  }

  function getGreeting(user) {
    if (user) {
      // if语句代码块使用 JSX，可以作变量、参数、还能做返回值
      return <h1>Hello, {formatName(user)}</h1>;
    }
    return <h1>Hello, Stranger</h1>
  }

  function GetGreeting() {
    return getGreeting(user);
  }

  export default GetGreeting;
#+end_src


** JSX 特定属性

*** WHAT

你可以通过使用引号，来将属性值指定为字符串字面量：

#+begin_src js
  const element = <div tabIndex="0"></div>;
#+end_src

也可以使用大括号，来在属性值中插入一个 JavaScript 表达式：

#+begin_src js
  const element = <img src={user.avatarUrl}></img>;
#+end_src

在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号

你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号

*** Attention

因为 JSX 语法上更接近 JavaScript 而不是 HTML

所以 React DOM 使用 camelCase（小驼峰命名）来定义属性的名称，而不使用 HTML 属性名称的命名约定

例如，JSX 里的 class 变成了 className，而 tabindex 则变为 tabIndex

** 使用 JSX 指定子元素

*** WHAT

假如一个标签里面没有内容，你可以使用 /> 来闭合标签，就像 XML 语法一样：

#+begin_src js
  const element = <img src={user.avatarUrl} />;
#+end_src

JSX 标签里能够包含很多子元素:

#+begin_src js
  const element = (
    <div>
      <h1>Hello!</h1>
      <h2>Good to see you here.</h2>
    </div>
  );
#+end_src


** JSX 防止注入攻击

*** WHAT

你可以安全地在 JSX 当中插入用户输入内容：

#+begin_src js
  const title = response.potentiallyMaliciousInput;
  // 直接使用是安全的：
  const element = <h1>{title}</h1>;
#+end_src

React DOM 在渲染所有输入内容之前，默认会进行[[https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-in-html][转义]]

它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容，所有的内容在渲染之前都被转换成了字符串

这样可以有效地防止 [[https://en.wikipedia.org/wiki/Cross-site_scripting][XSS（cross-site-scripting, 跨站脚本）]]攻击


** JSX 表示对象

*** WHAT

Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用

以下两种示例代码完全等效：

#+begin_src js
  const element = (
    <h1 className="greeting">
      Hello, world!
    </h1>
  );
  // 等效
  const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
  );
#+end_src

React.createElement() 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：

#+begin_src js
  // 注意：这是简化过的结构
  const element = {
    type: 'h1',
    props: {
      className: 'greeting',
      children: 'Hello, world!'
    }
  };
#+end_src

这些对象被称为 “React 元素”

它们描述了你希望在屏幕上看到的内容

React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新
