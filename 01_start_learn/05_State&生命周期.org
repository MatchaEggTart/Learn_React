* State & 生命周期

** State

*** WHY
本页面介绍了 React 组件中 state 和生命周期的概念。你可以查阅[[https://react.docschina.org/docs/react-component.html][详细的组件 API 参考文档]]
在元素渲染章节中，我们只了解了一种更新 UI 界面的方法，通过调用 root.render() 来修改我们想要渲染的元素：
#+begin_src js
  const root = ReactDOM.createRoot(document.getElementById('root'));
  
  function tick() {
    const element = (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {new Date().toLocaleTimeString()}.</h2>
      </div>
    );
    root.render(element);
  }

  setInterval(tick, 1000);
#+end_src

在本章节中，我们将学习如何封装真正可复用的 Clock 组件。它将设置自己的计时器并每秒更新一次。

我们可以从封装时钟的外观开始：
#+begin_src js
  const root = ReactDOM.createRoot(document.getElementById('root'));

  function Clock(props) {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {props.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }

  function tick() {
    root.render(<Clock date={new Date()} />);
  }

  setInterval(tick, 1000);
#+end_src

然而，它忽略了一个关键的技术细节：Clock 组件需要设置一个计时器，并且需要每秒更新 UI。
理想情况下，我们希望只编写一次代码，便可以让 Clock 组件自我更新：
#+begin_src js
  root.render(<Clock />);
#+end_src

我们需要在 Clock 组件中添加 “state” 来实现这个功能
State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件


** 将函数组件转换成 class 组件

*** HOW
通过以下五步将 Clock 的函数组件转成 class 组件：
1. 创建一个同名的 [[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes][ES6 class]]，并且继承于 React.Component
2. 添加一个空的 render() 方法
3. 将函数体移动到 render() 方法之中
4. 在 render() 方法中使用 this.props 替换 props
5. 删除剩余的空函数声明

#+begin_src js
  class Clock extends React.Component {
    render() {
      return (
        <div>
          <h1>Hello, world!</h1>
          <h2>It is {this.props.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
#+end_src   
现在 Clock 组件被定义为 class，而不是函数

每次组件更新时 render 方法都会被调用
但只要在相同的 DOM 节点中渲染 <Clock /> ，就仅有一个 Clock 组件的 class 实例被创建使用
这就使得我们可以使用如 state 或生命周期方法等很多其他特性

** 向 class 组件中添加局部的 state

*** HOW
我们通过以下三步将 date 从 props 移动到 state 中：
1. 把 render() 方法中的 this.props.date 替换成 this.state.date ：
#+begin_src js
  class Clock extends React.Component {
    render() {
      return (
        <div>
          <h1>Hello, world!</h1>
          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
#+end_src

2. 添加一个 class 构造函数，然后在该函数中为 this.state 赋初值：
#+begin_src js
  class Clock extends React.Component {
    constructor(props) {
      super(props);
      this.state = {date: new Date()};
    }

    render() {
      return (
        <div>
          <h1>Hello, world!</h1>
          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
#+end_src

通过以下方式将 props 传递到父类的构造函数中：
#+begin_src js
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
#+end_src
Class 组件应该始终使用 props 参数来调用父类的构造函数

3. 移除 <Clock /> 元素中的 date 属性：
   #+begin_src js
     ReactDOM.render(
       <Clock />,
       document.getElementById('root')
     );
   #+end_src

   我们之后会将计时器相关的代码添加到组件中

   代码如下：
   #+begin_src js
     class Clock extends React.Component {
       constructor(props) {
         super(props);
         this.state = {date: new Date()};
       }

       render() {
         return (
           <div>
             <h1>Hello, world!</h1>
             <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
           </div>
         );
       }
     }

     const root = ReactDOM.createRoot(document.getElementById('root'));
     root.render(<Clock />);
   #+end_src
