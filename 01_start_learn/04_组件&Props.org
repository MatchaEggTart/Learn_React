* 组件 & Props

** 组件

*** WHAT
组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素
组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。本指南旨在介绍组件的相关理念
你可以[[https://react.docschina.org/docs/react-component.html][参考详细组件 API]]


** 函数组件与 class 组件

*** WHAT
定义组件最简单的方式就是编写 JavaScript 函数：
#+begin_src js
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
#+end_src
该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素
这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数

你同时还可以使用 [[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes][ES6 的 class]] 来定义组件：
#+begin_src js
  class Welcome extends React.Component {
    render() {
      return <h1>Hello, {this.props.name}</h1>;
    }
  }
#+end_src

上述两个组件在 React 里是等效的


** Props

*** WHAT
当 React 元素为用户自定义组件时
它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”

例如，这段代码会在页面上渲染 “Hello, Sara”：
#+begin_src js
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }

  const root = ReactDOM.createRoot(document.getElementById('root'));
  const element = <Welcome name="Sara" />;
  root.render(element);
#+end_src

1. 我们调用 root.render()，并传入 <Welcome name="Sara" /> 作为参数
2. React 调用 Welcome 组件，并将 {name: 'Sara'} 作为 props 传入
3. Welcome 组件 将 <h1>Hello, Sara</h1>元素作为返回值
4. React DOM 将 DOM 高效地更新为 <h1>Hello, Sara</h1>

*** HOW


** 渲染组件

*** WHAT
之前，我们遇到的 React 元素都只是 DOM 标签：
#+begin_src js
  const element = <div />;
#+end_src

不过，React 元素也可以是用户自定义的组件：
#+begin_src js
  const element = <Welcome name="Sara" />;
#+end_src

