* 组件 & Props

** 组件

*** WHAT
组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素
组件允许你将 UI 拆分为独立可复用的代码片段，并对每个片段进行独立构思。本指南旨在介绍组件的相关理念
你可以[[https://react.docschina.org/docs/react-component.html][参考详细组件 API]]


** 函数组件与 class 组件

*** WHAT
定义组件最简单的方式就是编写 JavaScript 函数：
#+begin_src js
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
#+end_src
该函数是一个有效的 React 组件，因为它接收唯一带有数据的 “props”（代表属性）对象与并返回一个 React 元素
这类组件被称为“函数组件”，因为它本质上就是 JavaScript 函数

你同时还可以使用 [[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes][ES6 的 class]] 来定义组件：
#+begin_src js
  class Welcome extends React.Component {
    render() {
      return <h1>Hello, {this.props.name}</h1>;
    }
  }
#+end_src

上述两个组件在 React 里是等效的


** 渲染组件

*** WHAT
当 React 元素为用户自定义组件时
它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”

之前，我们遇到的 React 元素都只是 DOM 标签：
#+begin_src js
  const element = <div />;
#+end_src

不过，React 元素也可以是用户自定义的组件：
#+begin_src js
  const element = <Welcome name="Sara" />;
#+end_src

例如，这段代码会在页面上渲染 “Hello, Sara”：
#+begin_src js
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }

  const root = ReactDOM.createRoot(document.getElementById('root'));
  const element = <Welcome name="Sara" />;
  root.render(element);
#+end_src

1. 我们调用 root.render()，并传入 <Welcome name="Sara" /> 作为参数
2. React 调用 Welcome 组件，并将 {name: 'Sara'} 作为 props 传入
3. Welcome 组件 将 <h1>Hello, Sara</h1>元素作为返回值
4. React DOM 将 DOM 高效地更新为 <h1>Hello, Sara</h1>

*** HOW
src/Welcome.js
#+begin_src js
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>
}

export default Welcome;
#+end_src

src/index.js
#+begin_src html
  <Welcome name="Sara" />
#+end_src

*** ATTENTION
组件名称必须以大写字母开头

React 会将以小写字母开头的组件视为原生 DOM 标签
例如，<div /> 代表 HTML 的 div 标签，而 <Welcome /> 则代表一个组件，并且需在作用域内使用 Welcome
你可以在[[https://react.docschina.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized][深入 JSX]]中了解更多关于此规范的原因


** 组合组件

*** WHAT
组件可以在其输出中引用其他组件
这就可以让我们用同一组件来抽象出任意层次的细节
按钮，表单，对话框，甚至整个屏幕的内容：在 React 应用程序中，这些通常都会以组件的形式表示

例如，我们可以创建一个可以多次渲染 Welcome 组件的 App 组件
#+begin_src js
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }

  function App() {
    return (
      <div>
        <Welcome name="Sara" />
        <Welcome name="Cahal" />
        <Welcome name="Edite" />
      </div>
    );
  }

  ReactDOM.render(
    <App />,
    document.getElementById('root')
  );
#+end_src

*** HOW
src/index.js
#+begin_src html
  <Welcome name="Cahal" />
  <Welcome name="Edite" />
#+end_src

*** ATTENTION
通常来说，每个新的 React 应用程序的顶层组件都是 App 组件
但是，如果你将 React 集成到现有的应用程序中，你可能需要使用像 Button 这样的小组件，并自下而上地将这类组件逐步应用到视图层的每一处


** 提取组件

*** WHAT
将组件拆分为更小的组件。

例如，参考如下 Comment 组件：
#+begin_src js
  function Comment(props) {
    return (
      <div className="Comment">
        <div className="UserInfo">
          <img className="Avatar"
            src={props.author.avatarUrl}
            alt={props.author.name}
          />
          <div className="UserInfo-name">
            {props.author.name}
          </div>
        </div>
        <div className="Comment-text">
          {props.text}
        </div>
        <div className="Comment-date">
          {formatDate(props.date)}
        </div>
      </div>
    );
  }
#+end_src

传递的对象
#+begin_src js
  const comment = {
    date: new Date(),
    text: 'I hope you enjoy learning React!',
    author: {
      name: 'Hello Kitty',
      avatarUrl: 'https://placekitten.com/g/64/64',
    },
  };
#+end_src

传递的props
#+begin_src html
  <Comment
    date={comment.date}
    text={comment.text}
    author={comment.author}
  />
#+end_src
该组件用于描述一个社交媒体网站上的评论功能，它接收 author（对象），text （字符串）以及 date（日期）作为 props

该组件由于嵌套的关系，变得难以维护，且很难复用它的各个部分。因此，让我们从中提取一些组件出来
#+begin_src js
  // Avatar 组件
  function Avatar(props) {
    return (
      <img className="Avatar"
        src={props.user.avatarUrl}
        alt={props.user.name}
      />
    );
  }
  // UserInfo 组件
  function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
  }
  // Comment 组件
  function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}
#+end_src

*** HOW
src/index.js
#+begin_src js
  // 省略
  import Comment from './Comment';

  const comment = {
    date: new Date(),
    text: 'I hope you enjoy learning React!',
    author: {
      name: 'Hello Kitty',
      avatarUrl: 'https://placekitten.com/g/64/64',
    },
  };

  // 省略
  root.render(
    <React.StrictMode>
      // 省略
      <Comment
        date={comment.date}
        text={comment.text}
        author={comment.author}
      />
    </React.StrictMode>
  )
#+end_src

src/Comment.js
#+begin_src js
  import UserInfo from './UserInfo';

  function formatDate(date) {
    return date.toLocaleDateString();
  }

  function Comment(props) {
    return (
      <div className="Comment">
        <UserInfo user={props.author} />
        <div className="Comment-text">
          {props.text}
        </div>
        <div className="Comment-date">
          {formatDate(props.date)}
        </div>
      </div>
    )
  }

  export default Comment;
#+end_src

src/UserInfo.js
#+begin_src js
  import Avatar from './Avatar';

  function UserInfo(props) {
    return (
      <div className="UserInfo">
        <Avatar user={props.user} />
        <div className="UserInfo-name">
          {props.user.name}
        </div>
      </div>
    )
  }

  export default UserInfo;
#+end_src

src/Avatar.js
#+begin_src js
  import Avatar from './Avatar';

  function UserInfo(props) {
    return (
      <div className="UserInfo">
        <Avatar user={props.user} />
        <div className="UserInfo-name">
          {props.user.name}
        </div>
      </div>
    )
  }

  export default UserInfo;
#+end_src


** Props 的只读性

*** WHAT
组件无论是使用[[https://react.docschina.org/docs/components-and-props.html#function-and-class-components][函数声明还是通过 class 声明]]，都决不能修改自身的 props。来看下这个 sum 函数：
#+begin_src js
  function sum(a, b) {
    return a + b;
  }
#+end_src

这样的函数被称为[[https://en.wikipedia.org/wiki/Pure_function][“纯函数”]]，因为该函数不会尝试更改入参，且多次调用下相同的入参始终返回相同的结果。

相反，下面这个函数则不是纯函数，因为它更改了自己的入参：
#+begin_src js
  function withdraw(account, amount) {
    account.total -= amount;
  }
#+end_src
React 非常灵活，但它也有一个严格的规则：

所有 React 组件都必须像纯函数一样保护它们的 props 不被更改
当然，应用程序的 UI 是动态的，并会伴随着时间的推移而变化
